class Solution{
    public:
    vector<vector<int>>matrix;
    vector<string>answer;
    string temp;



    vector<string> findPath(vector<vector<int>> &mm, int n) {
        this->matrix = move(mm);


        if(matrix[0][0] == 1)
            backtrack(0,0);

        mm = move(this->matrix);

        return answer;
    }



    void backtrack(int i, int j) {
        // go right.
        int n = matrix.size();

        if(i >= n || j >= n) return ;

        if(i == n-1 && j == n-1) {
            if(matrix[i][j] == 1)
                answer.push_back(temp);
            
            return;
        }

        matrix[i][j] = 2; // blocking the place from where we are coming.

        if(j+1 < n && matrix[i][j+1] == 1) {
            temp.push_back('R');
            backtrack(i, j+1);
            temp.pop_back();
        }

        if(j-1 >= 0 && matrix[i][j-1] == 1) {
            temp.push_back('L');
            backtrack(i, j-1);
            temp.pop_back();
        }

        if(i+1 < n && matrix[i+1][j] == 1) {
            temp.push_back('D');
            backtrack(i+1, j);
            temp.pop_back();
        }

        if(i-1>=0 && matrix[i-1][j] == 1) {
            temp.push_back('U');
            backtrack(i-1, j);
            temp.pop_back();
        }

        matrix[i][j] = 1;
    }   
};
